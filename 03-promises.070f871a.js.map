{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAKMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAI/BH,EAAKC,KAAKG,iBAAiB,UAGlB,SAAaC,GACpBA,EAAEC,iBA8BuB,SAANC,GACnB,I,IADqBC,EAAFD,EAAEE,MAAOC,EAATH,EAASG,KAAMC,EAAfJ,EAAeI,OACzBC,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAE/BC,EAAcD,EAAI,EAAGJ,EAAQE,EAAOE,GACjCE,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUP,EAAKM,EAALN,MACjBQ,GAAkB,EAClBnB,EAAAoB,OAAOC,QAAQ,kBAA8CC,OAAdJ,EAAS,OAA+CI,OAAzCT,EAAO,oCAAoFS,OAAxBH,EAAe,WAAmBG,OAANX,EAAM,U,IAEpKY,OAAM,SAAAN,G,IAAGC,EAAQD,EAARC,SAAUP,EAAKM,EAALN,MAClBa,GAAiB,EACjBxB,EAAAoB,OAAOK,QAAQ,kBAA8CH,OAAdJ,EAAS,OAAgDI,OAA1CT,EAAO,qCAAqFS,OAAvBE,EAAc,WAAmBF,OAANX,EAAM,U,IAvC1Ke,EAIsBT,EAJKf,EAAKC,KAAKwB,SAIbhB,EAAFM,EAAEN,MAAOC,EAATK,EAASL,KAAMC,EAAfI,EAAeJ,OAC9B,CAAEF,MAAOiB,OAAOjB,EAAMkB,OAAQjB,KAAMgB,OAAOhB,EAAKiB,OAAQhB,OAAQe,OAAOf,EAAOgB,UADvE,IAAQZ,EAAEN,EAAOC,EAAMC,C,IAIvC,IAAIM,EAAiB,EACjBK,EAAgB,EAGK,SAAhBT,EAAcG,EAAUP,GAC/B,IAAMmB,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EAEFI,EAAQ,CAAEhB,WAAUP,UAGpBwB,EAAO,CAAEjB,WAAUP,S,GAEpBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\n//* DOM\nconst refs = {\n  form: document.querySelector('form'),\n};\n\n//* submit\nrefs.form.addEventListener('submit', onFormSubmit);\n\n//* function елементів\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  processTask(getInputValues(refs.form.elements));\n}\n\n//* Деструктуризація\nfunction getInputValues({ delay, step, amount }) {\n  return { delay: Number(delay.value), step: Number(step.value), amount: Number(amount.value) };\n}\n\nlet resolvePromise = 0\nlet rejectPromise = 0\n\n//* Виклик n разів скільки в amount (random + виклик resolve reject)\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}     \n\n//* Формування кількості викликів\nfunction processTask({ delay, step, amount }) {\n  for (let i = 0; i < amount; i += 1) {\n    // console.log(i + 1, delay + step * i);\n    createPromise(i + 1, delay + step * i)\n      .then(({ position, delay }) => {\n        resolvePromise += 1\n        Notify.success(`Повідомлення № ${position} з ${amount}. Виконано обіцянку в кількості ${resolvePromise} шт за ${delay} ms. ✅`)\n      })\n      .catch(({ position, delay }) => {\n        rejectPromise += 1\n        Notify.failure(`Повідомлення № ${position} з ${amount}. Скасовано обіцянку в кількості ${rejectPromise} шт за ${delay} ms. ❌`)\n      })   \n     \n  }\n\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","addEventListener","e","preventDefault","param1","delay1","delay","step","amount","i","$ce04d3a99e08e73b$var$createPromise","then","param","position","$ce04d3a99e08e73b$var$resolvePromise","Notify","success","concat","catch","$ce04d3a99e08e73b$var$rejectPromise","failure","$ce04d3a99e08e73b$var$processTask","elements","Number","value","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.070f871a.js.map"}